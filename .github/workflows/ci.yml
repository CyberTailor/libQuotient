name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

defaults:
  run:
    shell: bash

concurrency: ci-${{ github.ref }}

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.update-api != '' }} # the current upstream API definitions are expected to fail the test
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        compiler: [ GCC, Clang ]
        platform: [ '' ]
        qt-version: [ '5.12.10' ]
        qt-arch: [ '' ]
        # Not using binary values here, to make the job captions more readable
        e2ee: [ '' ]
        update-api: [ '', 'update-api' ]
        exclude:
        - os: macos-10.15
          compiler: GCC
        include:
        - os: windows-2019
          compiler: MSVC
          platform: x64
          qt-version: '5.12.10'
          qt-arch: win64_msvc2017_64
        - os: windows-2019
          compiler: MSVC
          platform: x64
          qt-version: '5.12.10'
          qt-arch: win64_msvc2017_64
          update-api: update-api

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: ${{ matrix.e2ee != '' }}

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}${{ matrix.platform }}-Qt${{ matrix.qt-version }}-cache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.11.1
      with:
        version: ${{ matrix.qt-version }}
        arch: ${{ matrix.qt-arch }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install Ninja (macOS/Windows)
      if: ${{ !startsWith(matrix.os, 'ubuntu') }}
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install Ninja and Valgrind (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get -qq install ninja-build valgrind
        echo "VALGRIND=valgrind --tool=memcheck --leak-check=yes --gen-suppressions=all --suppressions=$GITHUB_WORKSPACE/quotest/.valgrind.supp" >>$GITHUB_ENV

    - name: Setup build environment
      run: |
        if [ "${{ matrix.compiler }}" == "GCC" ]; then
            CXX_VERSION_POSTFIX='-10'
            echo "CC=gcc$CXX_VERSION_POSTFIX" >>$GITHUB_ENV
            echo "CXX=g++$CXX_VERSION_POSTFIX" >>$GITHUB_ENV
        elif [[ '${{ matrix.compiler }}' == 'Clang' ]]; then
            if [[ '${{ runner.os }}' == 'Linux' ]]; then
                CXX_VERSION_POSTFIX='-11'
                # Do CodeQL analysis on one of Linux branches
                echo "CODEQL_ANALYSIS=true" >>$GITHUB_ENV
            fi
            echo "CC=clang$CXX_VERSION_POSTFIX" >>$GITHUB_ENV
            echo "CXX=clang++$CXX_VERSION_POSTFIX" >>$GITHUB_ENV
        fi
        if grep -q 'refs/tags' <<<'${{ github.ref }}'; then
            VERSION="$(git describe --tags)"
        elif [ '${{ github.ref }}' == 'refs/heads/master' ]; then
            VERSION="ci${{ github.run_number }}-$(git rev-parse --short HEAD)"
        else
            VERSION="$(git describe --all --contains)-ci${{ github.run_number }}-$(git rev-parse --short HEAD)"
        fi
        echo "QUOTEST_ORIGIN=$VERSION @ ${{ runner.os }}/${{ matrix.compiler }}" >>$GITHUB_ENV
        echo "CMAKE_ARGS=-G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=false \
                         -DCMAKE_INSTALL_PREFIX=~/.local -DCMAKE_PREFIX_PATH=~/.local\
                         -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON" >>$GITHUB_ENV

        if [[ '${{ runner.os }}' != 'Windows' ]]; then
            BIN_DIR=/bin
        fi
        echo "BIN_DIR=$BIN_DIR" >>$GITHUB_ENV
        echo "~/.local$BIN_DIR" >>$GITHUB_PATH

        cmake -E make_directory ${{ runner.workspace }}/build
        echo "BUILD_PATH=${{ runner.workspace }}/build/libQuotient" >>$GITHUB_ENV

    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.compiler == 'MSVC'
      with:
        arch: ${{ matrix.platform }}

    - name: Install OpenSSL
      if: contains(matrix.os, 'ubuntu') and matrix.e2ee
      run: |
        sudo apt-get install libssl-dev
        echo "openssl version" >>$GITHUB_ENV

    - name: Build and install olm
      if: matrix.e2ee
      working-directory: ${{ runner.workspace }}
      run: |
        git clone https://gitlab.matrix.org/matrix-org/olm.git
        cmake -S olm -B build/olm $CMAKE_ARGS
        cmake --build build/olm --target install
        echo "QUOTEST_ORIGIN=$QUOTEST_ORIGIN with E2EE" >>$GITHUB_ENV

    - name: Pull CS API and build GTAD
      if: matrix.update-api
      working-directory: ${{ runner.workspace }}
      run: |
        git clone https://github.com/matrix-org/matrix-doc.git
        git clone --recursive https://github.com/KitsuneRal/gtad.git
        cmake -S gtad -B build/gtad $CMAKE_ARGS -DBUILD_SHARED_LIBS=OFF
        cmake --build build/gtad
        echo "CMAKE_ARGS=$CMAKE_ARGS -DMATRIX_DOC_PATH=${{ runner.workspace }}/matrix-doc \
                                     -DGTAD_PATH=${{ runner.workspace }}/build/gtad/gtad" \
             >>$GITHUB_ENV
        echo "QUOTEST_ORIGIN=$QUOTEST_ORIGIN with API files regeneration" >>$GITHUB_ENV

    - name: Initialize CodeQL tools
      if: env.CODEQL_ANALYSIS
      uses: github/codeql-action/init@v1
      with:
        languages: cpp
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Configure libQuotient
      run: |
        cmake -S $GITHUB_WORKSPACE -B $BUILD_PATH $CMAKE_ARGS \
              -DQuotient_ENABLE_E2EE=${{ matrix.e2ee }} -DQuotient_INSTALL_TESTS=ON

    - name: Regenerate API code
      if: matrix.update-api
      run: cmake --build ../build/libQuotient --target update-api

    - name: Build and install libQuotient
      run: |
        cmake --build $BUILD_PATH --target all install
        ls ~/.local$BIN_DIR/quotest

    - name: Run tests
      env:
        TEST_USER: ${{ secrets.TEST_USER }}
        TEST_PWD: ${{ secrets.TEST_PWD }}
        QT_LOGGING_RULES: 'quotient.main.debug=true;quotient.jobs.debug=true'
        QT_MESSAGE_PATTERN: '%{time h:mm:ss.zzz}|%{category}|%{if-debug}D%{endif}%{if-info}I%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}|%{message}'
      run: |
        ctest --test-dir $BUILD_PATH --output-on-failure
        [[ -z "$TEST_USER" ]] || \
            $VALGRIND quotest "$TEST_USER" "$TEST_PWD" quotest-gha '#quotest:matrix.org' "$QUOTEST_ORIGIN"
      timeout-minutes: 4 # quotest is supposed to finish within 3 minutes, actually
    
    - name: Perform CodeQL analysis
      if: env.CODEQL_ANALYSIS
      uses: github/codeql-action/analyze@v1
